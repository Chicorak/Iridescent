# Create defines based on platform
if (CMAKE_SYSTEM_NAME MATCHES "Windows") 
	set(TARGET_PLATFORM_WINDOWS 1) 
	add_compile_definitions(TARGET_PLATFORM_WINDOWS)
elseif (CMAKE_SYSTEM_NAME MATCHES "Linux")
	set(TARGET_PLATFORM_LINUX 1)
	add_compile_definitions(TARGET_PLATFORM_LINUX)
elseif (CMAKE_SYSTEM_NAME MATCHES "Darwin")
	set(TARGET_PLATFORM_MACOS 1)
	add_compile_definitions(TARGET_PLATFORM_MACOS)
elseif (CMAKE_SYSTEM_NAME MATCHES "Xbone")
	set(TARGET_PLATFORM_XBONE 1)
	add_compile_definitions(TARGET_PLATFORM_XBONE)
endif ()


# Determine target architecture
if ((CMAKE_SYSTEM_PROCESSOR MATCHES "AMD64" OR CMAKE_SYSTEM_PROCESSOR MATCHES "x86") AND CMAKE_SIZEOF_VOID_P EQUAL 8)
	set(TARGET_ARCHITECTURE_X64 1)
	set(TARGET_ARCHITECTURE_NAME "x86-64")
elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "AMD64" AND CMAKE_SIZEOF_VOID_P EQUAL 4)
	set(TARGET_ARCHITECTURE_X86 1)
	set(TARGET_ARCHITECTURE_NAME "x86")
endif()


# Determine compiler
if (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
	set(TARGET_COMPILER_MSVC 1)
elseif (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
	set(TARGET_COMPILER_CLANG 1)
elseif (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
	set(TARGET_COMPILER_GCC 1)
endif()


# Check if compiler is good enough
if (TARGET_COMPILER_MSVC)

endif()